<!-- -*- mode: XML -*- -->
<!-- <?xml version="1.0" encoding="utf-8"?> -->
<launch>
	<!-- main source -->
	<node pkg="lane_detection_example" type="lane_detector.py" name="lane_detector" />
	
	<!-- vesc -->
	<arg name="node_name" default="vesc_driver_node" />

	<!-- Optionally launch in GDB, for debugging -->
	<arg name="debug" default="false" />
	<arg if="$(arg debug)" name="launch_prefix1" value="xterm -e gdb --args" />
	<arg unless="$(arg debug)" name="launch_prefix1" value="" />

	<!-- VESC driver parameters -->
	<arg name="port" default="/dev/ttyVesc" />

	<!-- VESC driver node -->
	<node pkg="vesc_driver" type="vesc_driver_node" name="$(arg node_name)"
			output="screen" launch-prefix="$(arg launch_prefix1)" >
		<param name="port" value="$(arg port)" />
	</node>

	<!-- ridar -->
	<node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
		<param name="serial_port"         type="string" value="/dev/ttyUSB0"/>
		<param name="serial_baudrate"     type="int"    value="115200"/><!--A1/A2 -->
		<!--param name="serial_baudrate"     type="int"    value="256000"--><!--A3 -->
		<param name="frame_id"            type="string" value="laser"/>
		<param name="inverted"            type="bool"   value="false"/>
		<param name="angle_compensate"    type="bool"   value="true"/>
  	</node>
	
	<!-- cam -->
	<node name="usb_cam" pkg="usb_cam" type="usb_cam_node" output="screen" >
		<param name="video_device" value="/dev/video1" />
		<param name="image_width" value="640" />
		<param name="image_height" value="480" />
		<param name="pixel_format" value="mjpeg" />
		<param name="camera_frame_id" value="usb_cam" />
		<param name="io_method" value="mmap"/>
  	</node>
 	<node name="image_view" pkg="image_view" type="image_view" respawn="false" output="screen">
		<remap from="image" to="/usb_cam/image_raw"/>
		<param name="autosize" value="true" />
  	</node>

	<!-- YOLO -->
	<!-- Console launch prefix -->
	<arg name="launch_prefix2" default=""/>
	<arg name="image" default="/usb_cam/image_raw" />

	<!-- Config and weights folder. -->
	<arg name="yolo_weights_path"          default="$(find darknet_ros)/yolo_network_config/weights"/>
	<arg name="yolo_config_path"           default="$(find darknet_ros)/yolo_network_config/cfg"/>

	<!-- ROS and network parameter files -->
	<arg name="ros_param_file"             default="$(find darknet_ros)/config/ros.yaml"/>
	<arg name="network_param_file"         default="$(find darknet_ros)/config/yolov3-tiny.yaml"/>

	<!-- Load parameters -->
	<rosparam command="load" ns="darknet_ros" file="$(arg ros_param_file)"/>
	<rosparam command="load" ns="darknet_ros" file="$(arg network_param_file)"/>

	<!-- Start darknet and ros wrapper -->
	<node pkg="darknet_ros" type="darknet_ros" name="darknet_ros" output="screen" launch-prefix="$(arg launch_prefix2)">
		<param name="weights_path"          value="$(arg yolo_weights_path)" />
		<param name="config_path"           value="$(arg yolo_config_path)" />
		<remap from="/image_jpeg"  to="$(arg image)" />
	</node>

 <!--<node name="republish" type="republish" pkg="image_transport" output="screen" 	args="compressed in:=/front_camera/image_raw raw out:=/camera/image_raw" /> -->
</launch>
